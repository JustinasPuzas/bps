import Head from "next/head";
import styles from "./manageevents.module.css";
import AddIcon from "@mui/icons-material/Add";
import axios from "axios";
import { useEffect, useState } from "react";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import { eventNames } from "process";
import { useSession, signIn, signOut } from "next-auth/react";
import { prisma } from "../server/db";
import EventCard from "../components/EventCard/EventCard";
import { DiscoverCard } from "../components/DiscoverBar/DiscoverBar";

export async function getServerSideProps() {
  const initialEvents = await prisma.event.findMany({
    select: {
      id: true,
      name: true,
      description: true,
      hostedBy: true,
      image: true,
      price: true,
      public: true,
      Tickets: {
        select: {
          id: true,
        },
      },
    },
  });

  return {
    props: {
      initialEvents,
    },
  };
}

interface ManageEventsProps {
  initialEvents: {
    id: string;
    name: true;
    description: string;
    hostedBy: string;
    image: string;
    price: number;
    public: boolean;
    location: true;
    Tickets: any[];
  }[];
}

const ManageEvents = ({ initialEvents }: ManageEventsProps) => {
  const { data: session, status } = useSession();
  const [open, setOpen] = useState(false);
  const [events, setEvents] = useState(initialEvents);
  const [error, setError] = useState("");
  const [eventName, setEventName] = useState("");
  const [eventDescription, setEventDescription] = useState("");
  const [eventEmail, setEventEmail] = useState("");
  const [eventPrice, setEventPrice] = useState("");
  const [eventLocation, setLocation] = useState("");
  const [eventImage, setImage] = useState("");

  if (status === "loading")
    return (
      <main className={styles.main}>
        <div className={styles.container}> Loading... </div>
      </main>
    );
  if (status === "unauthenticated") signIn();

  const onNameChange = (a: any) => {
    setEventName(a.target.value);
  };

  const onDescriptionChange = (a: any) => {
    setEventDescription(a.target.value);
  };

  const onEmailChange = (a: any) => {
    setEventEmail(a.target.value);
  };

  const onPriceChange = (a: any) => {
    setEventPrice(a.target.value);
  };

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Head>
        <title>BPS Event Manager</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.cardRow}>
          <div className={styles.cardMain}>
            <h3>Event Manager</h3>
            <Button
              onClick={handleClickOpen}
              startIcon={<AddIcon />}
              variant="outlined"
            >
              Add Event
            </Button>
          </div>
          {events.map((event: any) => {
            return (
              <EventListing
                key={event.id}
                type={"edit"}
                id={event.id}
                name={event.name}
                description={event.description}
                price={event.price}
                location={event.location}
                hostedBy={event.hostedBy}
                image={event.image}
                pub={event.public}
                Tickets={event.Tickets}
                setEvents={setEvents}
              />
            );
          })}
        </div>
      </main>
    </>
  );
};

interface EventListingProps {
  type: "edit" | "create";
  id: string;
  name: string;
  description: string;
  price: number;
  location: string;
  hostedBy: string;
  image: string;
  pub: boolean;
  Tickets: any[];
  setEvents: any;
}

const EventListing = ({
  type,
  id,
  name,
  description,
  price,
  location,
  hostedBy,
  image,
  pub,
  Tickets,
  setEvents,
}: EventListingProps) => {
  const [open, setOpen] = useState(false);
  const [error, setError] = useState("");
  const [eventName, setEventName] = useState("");
  const [eventDescription, setEventDescription] = useState("");
  const [eventEmail, setEventEmail] = useState("");
  const [eventPrice, setEventPrice] = useState("");
  const [eventLocation, setLocation] = useState("");
  const [eventImage, setImage] = useState("");
  const [eventPublic, setPublic] = useState(pub);

  const handleUpdateEvent = async () => {
    try {
      await axios.put("/api/manager/updateevent", {
        id: id,
        name: eventName,
        description: eventDescription,
        hostedBy: eventEmail,
        price: eventPrice,
        location: eventLocation,
        image: eventImage,
      });
      const axiosEvents = await axios.get("/api/event");
        setEvents(axiosEvents.data);
      handleClose();
    } catch (err: any) {
      console.log(err);
      setError(err.response.data.error);
    }
  };

  const onPublicChange = async (a: any) => {
    try {
      await axios.put("/api/manager/updateevent", {
        id: id,
        public: !eventPublic,
      });
      handleClose();
      setPublic(!eventPublic);
    } catch (err: any) {
      setError(err.response.data.error);
    }
  };

  const onNameChange = (a: any) => {
    setEventName(a.target.value);
  };

  const onDescriptionChange = (a: any) => {
    setEventDescription(a.target.value);
  };

  const onEmailChange = (a: any) => {
    setEventEmail(a.target.value);
  };

  const onPriceChange = (a: any) => {
    setEventPrice(a.target.value);
  };

  const onLocationChange = (a: any) => {
    setLocation(a.target.value);
  };

  const onImageChange = (a: any) => {
    setImage(a.target.value);
  };

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <>
      <div className={styles.eventCard}>
        <h3>{name}</h3>
        <p>{description}</p>
        <p>Contact: {hostedBy}</p>
        <p>Price: {price} Eur</p>
        <p>Sold:{Tickets?.length}</p>
        <Button onClick={handleClickOpen}>Edit</Button>
        <Button onClick={onPublicChange}>
          {eventPublic ? "Public" : "Private"}
        </Button>
      </div>
      <Dialog
        sx={{
          "& .css-1t1j96h-MuiPaper-root-MuiDialog-paper": {
            maxWidth: "100%",
            minWidth: "80vw"
          },
        }}
        open={open}
        onClose={handleClose}
      >
        <div className={styles.dialogContainer}>
          <DialogTitle>Edit Event</DialogTitle>
          <DialogContent>
            <DialogContentText>
              To change information, please edit the following information:
              <h4 className={styles.error}>{`\n${error}`}</h4>
            </DialogContentText>
            <div className={styles.editContainer}>
              <div className={styles.editFields}>
                <TextField
                  autoFocus
                  margin="dense"
                  id="name"
                  label="Name"
                  type="text"
                  fullWidth
                  variant="standard"
                  placeholder={name}
                  onChange={onNameChange}
                />
                <TextField
                  autoFocus
                  margin="dense"
                  id="description"
                  label="Description"
                  multiline
                  type="text"
                  fullWidth
                  variant="standard"
                  placeholder={description}

                  onChange={onDescriptionChange}
                />
                <TextField
                  autoFocus
                  margin="dense"
                  id="email"
                  label="Contact Email"
                  type="email"
                  fullWidth
                  variant="standard"
                  placeholder={hostedBy}
                  onChange={onEmailChange}
                />
                <TextField
                  autoFocus
                  margin="dense"
                  id="price"
                  label="Price"
                  type="number"
                  fullWidth
                  variant="standard"
                  placeholder={`${price}`}
                  onChange={onPriceChange}
                />
                <TextField
                  autoFocus
                  margin="dense"
                  id="location"
                  label="Location"
                  type="text"
                  fullWidth
                  variant="standard"
                  placeholder={location}
                  onChange={onLocationChange}
                />
                <TextField
                  autoFocus
                  margin="dense"
                  id="image"
                  label="Image"
                  type="text"
                  fullWidth
                  variant="standard"
                  placeholder={image}
                  onChange={onImageChange}
                />
              </div>
              <div className={styles.editPreview}>
                <div className={styles.editPreviewColumn}>
                  <p>Search Preview:</p>
                  <EventCard
                    id={id}
                    name={eventName ? eventName : name}
                    description={
                      eventDescription ? eventDescription : description
                    }
                    price={Number.parseFloat(
                      eventPrice ? eventPrice : `${price}`
                    )}
                    image={eventImage ? eventImage : image}
                  />
                </div>
                <div className={styles.editPreviewColumn}>
                  <p>Discover Preview:</p>
                  <DiscoverCard
                    id={id}
                    name={eventName ? eventName : name}
                    description={
                      eventDescription ? eventDescription : description
                    }
                    price={Number.parseFloat(
                      eventPrice ? eventPrice : `${price}`
                    )}
                    image={eventImage ? eventImage : image}
                  />
                </div>
              </div>
            </div>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button onClick={handleUpdateEvent}>Save</Button>
          </DialogActions>
        </div>
      </Dialog>
    </>
  );
};

export default ManageEvents;
