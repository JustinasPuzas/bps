import styles from "./profile.module.css";
import { NextPage } from "next";
import Head from "next/head";
import { useSession, signIn, signOut } from "next-auth/react";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import { useEffect, useState } from "react";
import axios from "axios";

const Profile: NextPage = () => {
  const { data: session, status } = useSession();
  const [edit, setEdit] = useState(false);
  const [userName, setUserName] = useState("");
  const [email, setEmail] = useState("");
  const [valid, setValid] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [tickets, setTickets] = useState([]);

  useEffect(() => {
    const getTickets = async () => {
      const axiosTickets = await axios.get("/api/profile");
      console.log(axiosTickets.data.tickets);
      setTickets(axiosTickets.data.tickets);
    };
    getTickets();
  }, []);

  const onSave = async () => {
    const axiosUser = await axios.put("/api/profile/update", {
      name: userName,
      email: email,
    });
    console.log(axiosUser);
    setEdit(false);
  };

  const onNameChange = (a: any) => {
    const name = a.target.value;
    if (email.length == 0) setEmail(`${session?.user?.email}`);
    setUserName(name);
    if (name.length < 3) {
      setErrorMsg("Username must be at least 3 characters long");
      setValid(false);
    } else {
      setErrorMsg("");
      setValid(true);
    }
  };

  const onEmailChange = (a: any) => {
    const mail = a.target.value;
    if (userName.length == 0) setUserName(`${session?.user?.name}`);
    setEmail(mail);
    if (mail.indexOf("@") == -1 || mail.indexOf(".") == -1) {
      setErrorMsg("Email is not valid");
      setValid(false);
    } else {
      setErrorMsg("");
      setValid(true);
    }
  };

  // Render
  if (status === "loading")
    return (
      <main className={styles.main}>
        <div className={styles.container}> Loading... </div>
      </main>
    );
  if (status === "unauthenticated") signIn();

  return (
    <>
      <Head>
        <title>BPS Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.cardRow}>
          <div className={styles.card}>
            <h3>Profile</h3>
            <h4>{errorMsg}</h4>
            <form>
              <TextField
                color="primary"
                id="standard-basic"
                label="UserName"
                variant="standard"
                defaultValue={`${session?.user?.name}`}
                disabled={!edit}
                onChange={onNameChange}
              />
              <TextField
                color="primary"
                id="standard-basic"
                label="Email"
                variant="standard"
                defaultValue={`${session?.user?.email}`}
                disabled={!edit}
                onChange={onEmailChange}
              />
              {/* <TextField
                id="standard-basic"
                label="New Password"
                variant="standard"
                disabled={!edit}
              />
              <TextField
                id="standard-basic"
                label="Repeat Password"
                variant="standard"
                disabled={!edit}
              /> */}
            </form>

            <div>
              {edit ? (
                <>
                  <Button
                    variant="text"
                    color="error"
                    onClick={() => setEdit(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    variant="outlined"
                    color="success"
                    disabled={!valid}
                    onClick={() => onSave()}
                  >
                    Save
                  </Button>
                </>
              ) : (
                <>
                  <Button variant="text" onClick={() => setEdit(true)}>
                    Edit
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => signOut()}
                  >
                    SignOut
                  </Button>
                </>
              )}
            </div>
          </div>
        </div>
        <div className={styles.card}>
          <h2>My Tickets</h2>
          {tickets.map((ticket: any) => (

            <div key={ticket.id}>
              <h3>Event: {ticket.name}</h3>
              <p>price: {ticket.price} Eur</p>
              <p>
                date bought: {new Date(ticket.createdAt).getFullYear()}/
                {new Date(ticket.createdAt).getMonth() + 1}/
                {new Date(ticket.createdAt).getDate()}{" "}
                {new Date(ticket.createdAt).getHours()}:
                {new Date(ticket.createdAt).getMinutes()}:
                {new Date(ticket.createdAt).getSeconds()}
              </p>
              <br />
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default Profile;
